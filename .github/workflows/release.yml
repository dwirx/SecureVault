name: Release Obsidian Plugin

on:
  push:
    tags:
      - '*.*.*'
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to release (e.g., 1.4.0 or v1.4.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build

      - name: Verify build artifacts
        run: |
          test -f main.js || (echo 'main.js missing' && exit 1)
          test -f manifest.json || (echo 'manifest.json missing' && exit 1)
          if [ -f styles.css ]; then echo 'styles.css present (optional)'; else echo 'styles.css missing (ok if unused)'; fi

      - name: Derive version
        id: ver
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          CLEAN_TAG="${TAG#v}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "clean_tag=${CLEAN_TAG}" >> $GITHUB_OUTPUT

      - name: Read manifest metadata
        id: manifest
        run: |
          PLUGIN_ID=$(jq -r '.id' manifest.json)
          PLUGIN_NAME=$(jq -r '.name' manifest.json)
          PLUGIN_VERSION=$(jq -r '.version' manifest.json)
          echo "plugin_id=${PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin_name=${PLUGIN_NAME}" >> $GITHUB_OUTPUT
          echo "plugin_version=${PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Plugin: ${PLUGIN_NAME} v${PLUGIN_VERSION} (${PLUGIN_ID})"

      - name: Validate version match
        run: |
          MANIFEST_VERSION="${{ steps.manifest.outputs.plugin_version }}"
          RELEASE_VERSION="${{ steps.ver.outputs.clean_tag }}"
          if [ "$MANIFEST_VERSION" != "$RELEASE_VERSION" ]; then
            echo "‚ùå ERROR: Version mismatch!"
            echo "   manifest.json version: $MANIFEST_VERSION"
            echo "   Release tag version:   $RELEASE_VERSION"
            echo ""
            echo "Please update manifest.json to match the release tag."
            exit 1
          fi
          echo "‚úÖ Version match confirmed: $MANIFEST_VERSION"

      - name: Create ZIP bundle
        id: zip
        run: |
          NAME="${{ steps.manifest.outputs.plugin_id }}-${{ steps.ver.outputs.clean_tag }}.zip"
          # -j to junk paths so files are at root of the zip
          if [ -f styles.css ]; then
            zip -j "$NAME" manifest.json main.js styles.css
            echo "‚úÖ Created ZIP with styles.css"
          else
            zip -j "$NAME" manifest.json main.js
            echo "‚úÖ Created ZIP without styles.css"
          fi
          echo "zip_name=$NAME" >> $GITHUB_OUTPUT
          echo "üì¶ ZIP bundle: $NAME"

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.ver.outputs.clean_tag }}"
          echo "Generating release notes for version $VERSION..."
          
          # Extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            NOTES=$(awk "/## v${VERSION}/,/## v[0-9]/" CHANGELOG.md | sed '/## v[0-9]/d' | head -n -1)
            if [ -z "$NOTES" ]; then
              NOTES="Release version ${VERSION}"
            fi
          else
            NOTES="Release version ${VERSION}"
          fi
          
          # Create release notes file
          cat << EOF > release_notes.md
          ## üîê SecureVault+ v${VERSION}
          
          $NOTES
          
          ---
          
          ## üì¶ Installation
          
          1. Download \`${{ steps.zip.outputs.zip_name }}\` or individual files below
          2. Extract to \`<vault>/.obsidian/plugins/securevault-plus/\`
          3. Reload Obsidian (Ctrl+R / Cmd+R)
          4. Enable plugin in Settings ‚Üí Community plugins
          
          ## üìã Required Files
          
          - \`manifest.json\` - Plugin metadata
          - \`main.js\` - Plugin code
          - \`styles.css\` - UI styling (optional but recommended)
          
          ## üîó Documentation
          
          - [User Guide](https://github.com/${{ github.repository }}/blob/master/README.md)
          - [Changelog](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md)
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.3.0...v${VERSION}
          EOF
          
          echo "‚úÖ Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: üîê SecureVault+ v${{ steps.ver.outputs.clean_tag }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            manifest.json
            main.js
            styles.css
            ${{ steps.zip.outputs.zip_name }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release summary
        run: |
          echo "## üéâ Release Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Plugin:** ${{ steps.manifest.outputs.plugin_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.ver.outputs.clean_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.ver.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Prerelease:** ${{ github.event.inputs.prerelease || false }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- manifest.json" >> $GITHUB_STEP_SUMMARY
          echo "- main.js" >> $GITHUB_STEP_SUMMARY
          echo "- styles.css" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.zip.outputs.zip_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.ver.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
